{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Persons","props","personList","filter","filterFunction","map","person","i","key","name","number","onClick","deleteHandler","id","PersonForm","onSubmit","addPersonHandler","value","newName","onChange","nameChangeHandler","newNumber","numberChangeHandler","type","Filter","filterValue","filterChangeHandler","request","axios","get","console","log","then","response","data","newObject","post","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilterValue","getDataHook","personService","allPersons","useEffect","event","target","preventDefault","some","alert","returnedPerson","concat","toUpperCase","includes","window","confirm","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uOAgBeA,EAdC,SAAAC,GACd,OACE,4BACGA,EAAMC,WAAWC,OAAOF,EAAMG,gBAAgBC,KAAI,SAACC,EAAQC,GAC1D,OACE,wBAAIC,IAAKF,EAAOG,MACbH,EAAOG,KADV,IACiBH,EAAOI,OADxB,IACgC,4BAAQC,QAAS,kBAAMV,EAAMW,cAAcN,EAAOO,MAAlD,gBCU3BC,EAhBI,SAAAb,GACjB,OACE,0BAAMc,SAAUd,EAAMe,kBACpB,sCACQ,2BAAOC,MAAOhB,EAAMiB,QAASC,SAAUlB,EAAMmB,qBAErD,wCACU,2BAAOH,MAAOhB,EAAMoB,UAAWF,SAAUlB,EAAMqB,uBAEzD,6BACE,4BAAQC,KAAK,UAAb,UCFOC,EARA,SAAAvB,GACX,OACI,6CACiB,2BAAOgB,MAAOhB,EAAMwB,YAAaN,SAAUlB,EAAMyB,wB,gBCczD,EAhBF,WACX,IAAMC,EAAUC,IAAMC,IAHV,gBAKZ,OADAC,QAAQC,IAAI,mBACLJ,EAAQK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBP,IAAMQ,KATV,eASwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALM,SAAArB,GAEjB,OADgBe,IAAMS,OAAN,UAdN,eAcM,YAA2BxB,IAC5BmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCiEhCI,EA3EH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAETrB,EAFS,KAEAwB,EAFA,OAGkBH,mBAAS,IAH3B,mBAGTlB,EAHS,KAGEsB,EAHF,OAIyBJ,mBAAS,IAJlC,mBAITd,EAJS,KAIImB,EAJJ,KAMVC,EAAc,WAClBf,QAAQC,IAAI,WACZe,IAAuBd,MAAK,SAAAe,GAC1BjB,QAAQC,IAAI,qBAAsBgB,GAClCN,EAAWM,OAGfC,oBAAUH,EAAa,IAsCvB,OACE,6BACE,kBAAC,EAAD,CACEpB,YAAaA,EACbC,oBAhCqB,SAAAuB,GACzBL,EAAkBK,EAAMC,OAAOjC,UAiC7B,yCACA,kBAAC,EAAD,CACEC,QAASA,EACTG,UAAWA,EACXL,iBAlCmB,SAAAiC,IACvBA,EAAME,iBACFX,EAAQY,MAAK,SAAA9C,GAAM,OAAIA,EAAOG,OAASS,MACzCmC,MAAM,GAAD,OAAInC,EAAJ,iCAGL4B,EADkB,CAAErC,KAAMS,EAASR,OAAQW,IACXW,MAAK,SAAAsB,GACnCb,EAAWD,EAAQe,OAAOD,IAC1BZ,EAAW,IACXC,EAAa,QA0BbvB,kBA/CmB,SAAA6B,GACvBP,EAAWO,EAAMC,OAAOjC,QA+CpBK,oBA5CqB,SAAA2B,GACzBN,EAAaM,EAAMC,OAAOjC,UA6CxB,uCACA,kBAAC,EAAD,CACEb,eApBe,SAAAE,GACnB,OAAOA,EAAOG,KAAK+C,cAAcC,SAAShC,EAAY+B,gBAoBlDtD,WAAYsC,EACZ5B,cA5Be,SAAAC,GAChB6C,OAAOC,QAAQ,sCAChBb,EAA2BjC,GAAImB,KAAKa,QCrCtBe,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.17880545.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Persons = props => {\r\n  return (\r\n    <ul>\r\n      {props.personList.filter(props.filterFunction).map((person, i) => {\r\n        return (\r\n          <li key={person.name}>\r\n            {person.name} {person.number} <button onClick={() => props.deleteHandler(person.id)}>Delete</button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = props => {\r\n  return (\r\n    <form onSubmit={props.addPersonHandler}>\r\n      <div>\r\n        Name: <input value={props.newName} onChange={props.nameChangeHandler} />\r\n      </div>\r\n      <div>\r\n        Number: <input value={props.newNumber} onChange={props.numberChangeHandler} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from 'react'\r\n\r\nconst Filter = props => {\r\n    return(\r\n        <div>\r\n            Filter value <input value={props.filterValue} onChange={props.filterChangeHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    console.log(\"service get all\")\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  const deletePerson = id => {\r\n      const request = axios.delete(`${baseUrl}/${id}`)\r\n      return request.then(response => response.data)\r\n  }\r\n  \r\n  export default { getAll, create, deletePerson }","import React, { useState, useEffect } from \"react\";\nimport Persons from \"./components/Persons\";\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport personService from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filterValue, setNewFilterValue] = useState(\"\");\n\n  const getDataHook = () => {\n    console.log(\"get all\");\n    personService.getAll().then(allPersons => {\n      console.log(\"returned persons: \", allPersons);\n      setPersons(allPersons);\n    });\n  };\n  useEffect(getDataHook, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = event => {\n    setNewFilterValue(event.target.value);\n  };\n\n  const handleAddingName = event => {\n    event.preventDefault();\n    if (persons.some(person => person.name === newName)) {\n      alert(`${newName} is already in the phonebook`);\n    } else {\n      const newPerson = { name: newName, number: newNumber };\n      personService.create(newPerson).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        setNewName(\"\");\n        setNewNumber(\"\");\n      });\n    }\n  };\n\n  const deletePerson = id => {\n    if(window.confirm(\"Do you want to delete the person?\")){\n      personService.deletePerson(id).then(getDataHook);\n    }\n  };\n\n  const filterByName = person => {\n    return person.name.toUpperCase().includes(filterValue.toUpperCase());\n  };\n\n  return (\n    <div>\n      <Filter\n        filterValue={filterValue}\n        filterChangeHandler={handleFilterChange}\n      />\n      <h2>Phonebook</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        addPersonHandler={handleAddingName}\n        nameChangeHandler={handleNameChange}\n        numberChangeHandler={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        filterFunction={filterByName}\n        personList={persons}\n        deleteHandler={deletePerson}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}